const { MongoClient } = require("mongodb");

// Replace the uri string with your connection string.
const uri =
  "mongodb+srv://sheepca03:DQQVtnIZ8a7exjWT@cluster0.j6o91.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

const client = new MongoClient(uri);
const dbName = 'dubhacks24'
let db, listingCollection, rentingCollection;


async function readAllAsJson() {
  try {
    const [listings, rentals] = await Promise.all([
      listingCollection.find({}).toArray(),
      rentingCollection.find({}).toArray()
    ]);
    const result = { listings, rentals };
    const json = JSON.stringify(result, null, 2);

    console.log('All Documents as JSON:', json);

    return json;  // Return the JSON string
  } catch (err) {
    console.error('Read operation failed:', err);
    return null;
  }
}

async function run() {
  try {
    await client.connect();
    console.log('Connected to MongoDB');
    db = client.db(dbName)
    listingCollection = db.collection('listingCollection');
    rentingCollection = db.collection('rentingCollection');
    await readAllAsJson()
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);


async function writeListing(id, username, lat, long, start, end, price, desc, city, state, street, zipcode) {
  try {
    await client.connect();

    const database = client.db('dubhacks24');
    const collection = database.collection('listingDB');

    collection.insert(
      {
        "_id": id,  
        "parentUsername": username,  
        "position": {          
            "city": city,
            "state": state,
            "street": street,
            "zipcode": zipcode,
            "coordinates": [long, lat]  
        },
        "start": start, 
        "end": end, 
        "price": price,       
        "description": desc
      }
    )
  } finally {
    await client.close();
  }
}

async function writeBooking(id, username, renter, lat, long, start, end, price, desc, city, state, street, zipcode) {
  try {
    await client.connect();

    const database = client.db('dubhacks24');
    const collection = database.collection('rentDB');

    collection.insert(
      {
        "_id": id,  
        "parentUsername": username,
        "renterUsername": renter,
        "position": {          
            "city": city,
            "state": state,
            "street": street,
            "zipcode": zipcode,
            "coordinates": [long, lat]  
        },
        "start": start, 
        "end": end, 
        "price": price,       
        "description": desc
      }
    )
  } finally {
    await client.close();
  }
}

// posted for rent
/*
{
    "_id": "unique_document_id",  // Automatically generated by MongoDB or your custom ID
    "parentUsername": "parentUser123",  // The ID or username of the parent user
    "position": {                        // Position data as a GeoJSON Point
        "type": "Point",
        "coordinates": [longitude, latitude]  // [longitude, latitude]
    },
    "start": "2024-10-12T14:00:00Z", // ISO 8601 formatted date for check-in
    "end": "2024-10-15T11:00:00Z", // ISO 8601 formatted date for check-out
    "price": 300.00                      // Price associated with the stay
    "description": "string"
}
*/

// currently being rented
/*
{
    "_id": "unique_document_id",  // Automatically generated by MongoDB or your custom ID
    "parentUsername": "parentUser123",  // The ID or username of the parent user
    "childUsername": "childUser456",    // The ID or username of the child user
    "position": {                        // Position data as a GeoJSON Point
        "type": "Point",
        "coordinates": [longitude, latitude]  // [longitude, latitude]
    },
    "checkInTime": "2024-10-12T14:00:00Z", // ISO 8601 formatted date for check-in
    "checkOutTime": "2024-10-15T11:00:00Z", // ISO 8601 formatted date for check-out
    "price": 300.00                      // Price associated with the stay
}
*/